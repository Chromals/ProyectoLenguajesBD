-- Creación de la Función CalcularDescuentoCliente
CREATE OR REPLACE FUNCTION CalcularDescuentoCliente(id_producto NUMBER) RETURN NUMBER IS
    descuento NUMBER(5, 2);
BEGIN
    SELECT CASE 
            WHEN ID_Categoria IN (1) THEN 0.15
            WHEN ID_Categoria IN (2) THEN 0.05
            WHEN ID_Categoria IN (3) THEN 0.30
            WHEN ID_Categoria IN (4) THEN 0.45
            WHEN ID_Categoria IN (5) THEN 0.15
            WHEN ID_Categoria IN (6, 7, 8) THEN 0.25
            WHEN ID_Categoria IN (9, 10) THEN 0.10
            ELSE 0
           END
    INTO descuento
    FROM Producto WHERE ID_Producto = id_producto;
    RETURN descuento;
END;
/

-- Creación de la Función CalcularImpuestos
CREATE OR REPLACE FUNCTION CalcularImpuestos(monto NUMBER) RETURN NUMBER IS
    impuestos NUMBER(10, 2);
BEGIN
    impuestos := monto * 0.13; -- Porcentaje de impuestos
    RETURN impuestos;
END;
/

-- Creación de la Función CantidadProducto
CREATE OR REPLACE FUNCTION CantidadProducto(id_producto NUMBER) RETURN NUMBER IS
    cantidad NUMBER;
BEGIN
    SELECT COUNT(*) INTO cantidad FROM Producto WHERE ID_Producto = id_producto;
    RETURN cantidad;
END;
/

-- Creación de la Función ConvertirMoneda
CREATE OR REPLACE FUNCTION ConvertirMoneda(monto_colon NUMBER) RETURN NUMBER IS
    monto_dolar NUMBER(10, 2);
BEGIN
    monto_dolar := monto_colon / 535.00; -- Tasa de cambio
    RETURN monto_dolar;
END;
/

-- Creación de la Función GenerarCodigoProducto
CREATE OR REPLACE FUNCTION GenerarCodigoProducto(nombre_producto VARCHAR2, id_categoria NUMBER) RETURN VARCHAR2 IS
    codigo VARCHAR2(20);
BEGIN
    SELECT SUBSTR(nombre_producto, 1, 3) || '-' || TO_CHAR(id_categoria)
    INTO codigo
    FROM dual;
    RETURN codigo;
END;
/

-- Creación de la Tabla Sucursal
CREATE TABLE Sucursal (
    ID_Sucursal NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Nombre VARCHAR2(50) NOT NULL,
    ID_Direccion NUMBER NOT NULL,
    CONSTRAINT PK_Sucursal PRIMARY KEY (ID_Sucursal)
);

-- Creación de la Tabla Trabajador
CREATE TABLE Trabajador (
    ID_Trabajador NUMBER NOT NULL,
    Nombre VARCHAR2(50) NOT NULL,
    Apellido_1 VARCHAR2(50) NOT NULL,
    Apellido_2 VARCHAR2(50) NOT NULL,
    Cargo VARCHAR2(100) NOT NULL,
    Salario NUMBER(18, 2) NOT NULL,
    Activo NUMBER(1) NOT NULL,
    Fecha_Inicio DATE NOT NULL,
    ID_Sucursal NUMBER NOT NULL,
    ID_Direccion NUMBER NOT NULL,
    CONSTRAINT PK_Trabajador PRIMARY KEY (ID_Trabajador)
);

-- Creación de la Vista Trabajadores_sucursal_44
CREATE OR REPLACE VIEW Trabajadores_sucursal_44 AS 
SELECT s.Nombre AS Sucursal, 
       t.Cargo, 
       t.Nombre || ' ' || t.Apellido_1 || ' ' || t.Apellido_2 AS Trabajador,
       t.Activo AS ACTIVO  
FROM Sucursal s
INNER JOIN Trabajador t 
ON s.ID_Sucursal = t.ID_Sucursal
WHERE s.Nombre = 'Sucursal Liberia' AND t.Activo = 1;

-- Creación de la Tabla Producto
CREATE TABLE Producto (
    ID_Producto NUMBER NOT NULL,
    Nombre VARCHAR2(50) NOT NULL,
    Descripcion VARCHAR2(200) NOT NULL,
    Precio NUMBER(18, 2) NOT NULL,
    ID_Categoria NUMBER NOT NULL,
    cantidad NUMBER,
    CONSTRAINT PK_Producto PRIMARY KEY (ID_Producto)
);

-- Creación de la Tabla Venta
CREATE TABLE Venta (
    ID_Venta NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Producto NUMBER NOT NULL,
    ID_Sucursal NUMBER NOT NULL,
    ID_Cliente NUMBER NOT NULL,
    Cantidad_Vendida NUMBER NOT NULL,
    Total_Venta NUMBER(18, 2) NOT NULL,
    Fecha DATE NOT NULL,
    CONSTRAINT PK_Venta PRIMARY KEY (ID_Venta)
);

-- Creación de la Vista cantproducto_vendido
CREATE OR REPLACE VIEW cantproducto_vendido AS 
SELECT p.Nombre AS Producto, SUM(v.Cantidad_Vendida) AS Cantidad_vendida
FROM Producto p
INNER JOIN Venta v ON p.ID_Producto = v.ID_Producto
GROUP BY p.Nombre;

-- Creación de la Vista Vista_ProductosMasVendidos
CREATE OR REPLACE VIEW Vista_ProductosMasVendidos AS
SELECT p.Nombre AS Producto, SUM(v.Cantidad_Vendida) AS Cantidad_Total_Vendida, SUM(v.Total_Venta) AS Ingresos
FROM Venta v
JOIN Producto p ON v.ID_Producto = p.ID_Producto
GROUP BY p.Nombre
ORDER BY SUM(v.Cantidad_Vendida) DESC;

-- Creación de la Tabla Inventario
CREATE TABLE Inventario (
    ID_Inventario NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Producto NUMBER NOT NULL,
    ID_Sucursal NUMBER NOT NULL,
    Cantidad_Disponible NUMBER NOT NULL,
    Fecha_Actualizacion DATE NOT NULL,
    CONSTRAINT PK_Inventario PRIMARY KEY (ID_Inventario)
);

-- Creación de la Vista Vista_EstadoInventarioPorSucursal
CREATE OR REPLACE VIEW Vista_EstadoInventarioPorSucursal AS
SELECT s.Nombre AS Sucursal, p.Nombre AS Producto, i.Cantidad_Disponible AS Cantidad_Disponible, i.Fecha_Actualizacion AS Ultima_Actualizacion
FROM Inventario i
JOIN Sucursal s ON i.ID_Sucursal = s.ID_Sucursal
JOIN Producto p ON i.ID_Producto = p.ID_Producto;

-- Creación de la Tabla Cliente
CREATE TABLE Cliente (
    ID_Cliente NUMBER NOT NULL,
    Nombre VARCHAR2(100) NOT NULL,
    Apellido_1 VARCHAR2(100) NOT NULL,
    Apellido_2 VARCHAR2(100) NOT NULL,
    Telefono NUMBER NOT NULL,
    Correo VARCHAR2(200) NOT NULL,
    ID_Direccion NUMBER NOT NULL,
    CONSTRAINT PK_Cliente PRIMARY KEY (ID_Cliente)
);

-- Creación de la Vista Vista_ClienteCompras
CREATE OR REPLACE VIEW Vista_ClienteCompras AS 
SELECT 
       c.Nombre || ' ' || c.Apellido_1 || ' ' || c.Apellido_2 AS Cliente,
       p.Nombre AS Nombre_del_producto, 
       v.Cantidad_Vendida AS Cantidad_comprada, 
       v.Total_Venta AS Total, 
       v.Fecha AS Fecha_de_compra
FROM Cliente c
INNER JOIN Venta v ON c.ID_Cliente = v.ID_Cliente
INNER JOIN Producto p ON v.ID_Producto = p.ID_Producto
WHERE c.ID_Cliente = 1;

-- Creación de la Tabla Auditoria
CREATE TABLE Auditoria (
    id_Auditoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Fecha DATE,
    Operacion VARCHAR2(200),
    ID_Trabajador NUMBER,
    Detalles VARCHAR2(200),
    CONSTRAINT PK_Auditoria PRIMARY KEY (id_Auditoria)
);

-- Creación de la Tabla Categoria
CREATE TABLE Categoria (
    ID_Categoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Nombre VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_Categoria PRIMARY KEY (ID_Categoria)
);

-- Creación de la Tabla CompraProductos
CREATE TABLE CompraProductos (
    ID_Compra_Producto NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Proveedor NUMBER NOT NULL,
    ID_Producto NUMBER NOT NULL,
    Cantidad_Comprada NUMBER NOT NULL,
    Costo_Total NUMBER(18, 2) NOT NULL,
    Fecha_Compra DATE NOT NULL,
    CONSTRAINT PK_CompraProductos PRIMARY KEY (ID_Compra_Producto)
);

-- Creación de la Tabla Devolucion
CREATE TABLE Devolucion (
    ID_Devolucion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Venta NUMBER NOT NULL,
    Motivo VARCHAR2(300) NOT NULL,
    Fecha DATE NOT NULL,
    CONSTRAINT PK_Devolucion PRIMARY KEY (ID_Devolucion)
);
-- Creación de las tablas
CREATE TABLE Direccion (
    ID_Direccion INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Provincia VARCHAR2(100) NOT NULL,
    Canton VARCHAR2(100) NOT NULL,
    Distrito VARCHAR2(100) NOT NULL
);

CREATE TABLE Proveedor (
    ID_Proveedor INT PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Apellido_1 VARCHAR2(50) NOT NULL,
    Apellido_2 VARCHAR2(50) NOT NULL,
    Telefono INT NOT NULL,
    Correo VARCHAR2(150) NOT NULL,
    ID_Direccion INT NOT NULL,
    FOREIGN KEY (ID_Direccion) REFERENCES Direccion(ID_Direccion)
);

-- Creación de constraints y foreign keys
ALTER TABLE Auditoria ADD CONSTRAINT FK_Auditoria_Trabajador FOREIGN KEY (ID_Trabajador) REFERENCES Trabajador(ID_Trabajador);
ALTER TABLE Cliente ADD CONSTRAINT FK_Cliente_Direccion FOREIGN KEY (ID_Direccion) REFERENCES Direccion(ID_Direccion);
ALTER TABLE CompraProductos ADD CONSTRAINT FK_CompraProductos_Producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto);
ALTER TABLE CompraProductos ADD CONSTRAINT FK_CompraProductos_Proveedor FOREIGN KEY (ID_Proveedor) REFERENCES Proveedor(ID_Proveedor);
ALTER TABLE Devolucion ADD CONSTRAINT FK_Devolucion_Venta FOREIGN KEY (ID_Venta) REFERENCES Venta(ID_Venta);
ALTER TABLE Inventario ADD CONSTRAINT FK_Inventario_Producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto);
ALTER TABLE Inventario ADD CONSTRAINT FK_Inventario_Sucursal FOREIGN KEY (ID_Sucursal) REFERENCES Sucursal(ID_Sucursal);
ALTER TABLE Producto ADD CONSTRAINT FK_Producto_Categoria FOREIGN KEY (ID_Categoria) REFERENCES Categoria(ID_Categoria);
ALTER TABLE Proveedor ADD CONSTRAINT FK_Proveedor_Direccion FOREIGN KEY (ID_Direccion) REFERENCES Direccion(ID_Direccion);
ALTER TABLE Sucursal ADD CONSTRAINT FK_Sucursal_Direccion FOREIGN KEY (ID_Direccion) REFERENCES Direccion(ID_Direccion);
ALTER TABLE Trabajador ADD CONSTRAINT FK_Trabajador_Direccion FOREIGN KEY (ID_Direccion) REFERENCES Direccion(ID_Direccion);
ALTER TABLE Trabajador ADD CONSTRAINT FK_Trabajador_Sucursal FOREIGN KEY (ID_Sucursal) REFERENCES Sucursal(ID_Sucursal);
ALTER TABLE Venta ADD CONSTRAINT FK_Venta_Cliente FOREIGN KEY (ID_Cliente) REFERENCES Cliente(ID_Cliente);
ALTER TABLE Venta ADD CONSTRAINT FK_Venta_Producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto);
ALTER TABLE Venta ADD CONSTRAINT FK_Venta_Sucursal FOREIGN KEY (ID_Sucursal) REFERENCES Sucursal(ID_Sucursal);

-- Creación de procedimientos almacenados en el esquema Mantenimientos
CREATE OR REPLACE PROCEDURE ActualizarInfoCliente(
    p_id_cliente INT,
    p_nombre VARCHAR2,
    p_apellido_1 VARCHAR2,
    p_apellido_2 VARCHAR2,
    p_correo VARCHAR2,
    p_nuevo_telefono VARCHAR2
) AS
BEGIN
    UPDATE Cliente
    SET Telefono = p_nuevo_telefono, Nombre = p_nombre, Apellido_1 = p_apellido_1, Apellido_2 = p_apellido_2, Correo = p_correo
    WHERE ID_Cliente = p_id_cliente;
END;
/

CREATE OR REPLACE PROCEDURE ActualizarProducto(
    p_id_producto INT,
    p_nombre_producto VARCHAR2,
    p_descripcion VARCHAR2,
    p_id_categoria INT,
    p_precio NUMBER,
    p_cantidad INT
) AS
BEGIN
    UPDATE Producto
    SET Nombre = p_nombre_producto,
        ID_Categoria = p_id_categoria,
        Precio = p_precio,
        Descripcion = p_descripcion,
        Cantidad = p_cantidad
    WHERE ID_Producto = p_id_producto;
END;
/

CREATE OR REPLACE PROCEDURE AgregarProducto(
    p_nombre_producto VARCHAR2,
    p_descripcion VARCHAR2,
    p_id_categoria INT,
    p_precio NUMBER,
    p_cantidad INT
) AS
BEGIN
    INSERT INTO Producto (Nombre, Descripcion, ID_Categoria, Precio, Cantidad)
    VALUES (p_nombre_producto, p_descripcion, p_id_categoria, p_precio, p_cantidad);
END;
/

CREATE OR REPLACE PROCEDURE BuscarProductosXNomXCat(
    p_nombre_producto VARCHAR2 DEFAULT NULL,
    p_id_categoria INT DEFAULT NULL
) AS
BEGIN
    IF p_nombre_producto IS NOT NULL THEN
        -- Buscar por nombre de producto
        OPEN :cursor FOR SELECT * FROM Producto WHERE Nombre LIKE '%' || p_nombre_producto || '%';
    ELSIF p_id_categoria IS NOT NULL THEN
        -- Buscar por categoría
        OPEN :cursor FOR SELECT * FROM Producto WHERE ID_Categoria = p_id_categoria;
    ELSE
        -- No se especificó ni nombre ni categoría
        DBMS_OUTPUT.PUT_LINE('Por favor, especifique un nombre de producto o una categoría para buscar.');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE CalcImpuestosxCantProd(
    p_id_producto INT
) AS
    v_cantidad_productos INT;
    v_impuestos NUMBER;
BEGIN
    -- Obtener la cantidad de productos
    SELECT Cantidad INTO v_cantidad_productos FROM Producto WHERE ID_Producto = p_id_producto;

    -- Calcular los impuestos según la cantidad de productos
    IF v_cantidad_productos < 30 THEN
        v_impuestos := CalcularImpuestos(v_cantidad_productos * 10); -- Aplica un 10% 
    ELSIF v_cantidad_productos > 100 THEN
        v_impuestos := CalcularImpuestos(v_cantidad_productos * 15); -- Aplica un 15% 
    ELSE
        v_impuestos := CalcularImpuestos(v_cantidad_productos * 13); -- Aplica un 13% por defecto
    END IF;

    :resultado := v_impuestos;
END;
/

CREATE OR REPLACE PROCEDURE CalcularDescuentoClienteXID(
    p_id_cliente INT,
    p_id_producto INT
) AS
    v_descuento NUMBER;
BEGIN
    SELECT CalcularDescuentoCliente(p_id_producto)
    INTO v_descuento
    FROM Cliente C
    INNER JOIN Venta V ON C.ID_Cliente = V.ID_Cliente
    WHERE C.ID_Cliente = p_id_cliente;

    :resultado := v_descuento;
END;
/

CREATE OR REPLACE PROCEDURE CalcularValorTotalVentas AS
    v_total NUMBER;
BEGIN
    SELECT SUM(Total_Venta)
    INTO v_total
    FROM Venta;

    :resultado := v_total;
END;
/

CREATE OR REPLACE PROCEDURE ListarVentasEntreFechas(
    p_fecha_inicio DATE,
    p_fecha_fin DATE
) AS
BEGIN
    OPEN :cursor FOR 
    SELECT ID_Venta, ID_Producto, Cantidad_Vendida, Total_Venta, Fecha
    FROM Venta
    WHERE Fecha BETWEEN p_fecha_inicio AND p_fecha_fin;
END;
/

CREATE OR REPLACE PROCEDURE RegistrarDevolucionProducto(
    p_id_venta INT,
    p_motivo VARCHAR2,
    p_fecha DATE
) AS
    v_cantidad_devuelta INT;
BEGIN
    INSERT INTO Devolucion (ID_Venta, Motivo, Fecha)
    VALUES (p_id_venta, p_motivo, p_fecha);

    -- Actualizar el inventario
    SELECT Cantidad_Vendida INTO v_cantidad_devuelta FROM Venta WHERE ID_Venta = p_id_venta;

    UPDATE Producto
    SET Cantidad = Cantidad + v_cantidad_devuelta
    WHERE ID_Producto = (SELECT ID_Producto FROM Venta WHERE ID_Venta = p_id_venta);
END;
/

CREATE OR REPLACE PROCEDURE RegistrarVenta(
    p_id_producto INT,
    p_id_sucursal INT,
    p_id_cliente INT,
    p_cantidad INT,
    p_monto_total NUMBER,
    p_fecha_venta DATE
) AS
BEGIN
    INSERT INTO Venta (ID_Producto, ID_Sucursal, ID_Cliente, Cantidad_Vendida, Total_Venta, Fecha)
    VALUES (p_id_producto, p_id_sucursal, p_id_cliente, p_cantidad, p_monto_total, p_fecha_venta);

    UPDATE Producto
    SET Cantidad = Cantidad - p_cantidad
    WHERE ID_Producto = p_id_producto;
END;
/

-- Creación de triggers
CREATE OR REPLACE TRIGGER Tr_ActualizacionAutomaticaPrecios
AFTER INSERT OR UPDATE ON Producto
FOR EACH ROW
BEGIN
    IF TO_CHAR(SYSDATE, 'MMDD') = '0101' THEN
        UPDATE Producto
        SET Precio = Precio + CalcularImpuestos(Precio)
        WHERE ID_Producto = :NEW.ID_Producto;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER AuditLog_Salario
AFTER UPDATE ON Trabajador
FOR EACH ROW
BEGIN
    IF UPDATING('Salario') THEN
        INSERT INTO Auditoria (Fecha, Operacion, ID_Trabajador, Detalles)
        VALUES (SYSDATE, 'UPDATE', :NEW.ID_Trabajador, 'Salario actualizado');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER actualizar_inventario
AFTER INSERT ON Venta
FOR EACH ROW
BEGIN
    UPDATE Inventario
    SET Cantidad_Disponible = Cantidad_Disponible - :NEW.Cantidad_Vendida
    WHERE ID_Producto = :NEW.ID_Producto
    AND ID_Sucursal = :NEW.ID_Sucursal;
END;
/

CREATE OR REPLACE TRIGGER registrar_actualizacion_cliente
AFTER UPDATE ON Cliente
FOR EACH ROW
BEGIN
    INSERT INTO Auditoria (Fecha, Operacion, ID_Trabajador, Detalles)
    VALUES (SYSDATE, 'UPDATE', :NEW.ID_Cliente, 'Actualización de datos del cliente');
END;
/
